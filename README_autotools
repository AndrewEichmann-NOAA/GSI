--------------------------------------------------------------------------------
Instructions for end users on building community GSI using autotools and for
developers to main autotools required files/directories.
--------------------------------------------------------------------------------

* Section A: for end users *

1. Compiling

  a. run "./configure FC=<Fortran compiler command>", for example:

     % ./configure FC=ifort

     Currently only ifort and pgf90 (or pgf95) are supported.

     Note, however, currently the latest/greatest src/main fails to compile
     using pgf90 for failing to distinguish an overloaded procedure.

  b. run "make install":

     % make install

     Note, running "make" followed by "make install" will not work if libraries
     are intended to be built. The default is to build libraries, unless
     required libraries have been built previously. See 3. and 4. below.

2. Required environment:

     i) Environment variable NETCDF, the full path of NETCDF package

    ii) Environment variable WRF_DIR, the full path of pre-built WRF V3.x

   iii) If choosing ifort as the Fortran compiler, environment varialbe
        LAPACK_PATH is required. This is the full path for Intel's MKL library

3. Optional environment:

   Environment varaiable CORELIB: If this environment variable is defined,
   compiling of libraries will be skipped. The required libraries in the
   path defined by CORELIB will be used, instead.

   Note, the pre-built libraries should be built with libtool, becuase of
   dependency of libraries on libraries. However, there is an work-around
   if the libraries were not built with libtool. See special notes on
   pre-built libraries in 7. below.

4. Environmet variables vs command-line options for "configure"

   All above-mentioned environment variables can also be specified as
   command-line options when running "./configure". For example:

   % ./configure FC=ifort NETCDF=/opt/netcdf WRF_DIR=/raid/src/WRF_V3.6.1

5. Compiling using debug flags:

   The script "configure" has built-in mechanism to use debug flags in
   compiling and linking stages. To turn this feature on, supply
   "--enable-debug" command-line flag to "./configure". For example:

   % ./configure FC=ifort --enable-debug

6. For help on using "configure", run

   % ./configure --help

   However, the output from this command is a general autotools instruction.
   Unless a user is absolutely sure what he/she is trying to do, please only
   focus on the options and flag mentioned above.

7. Special notes on pre-built libraries

   This package utilizes autotools' libtool to build libraries and main code.
   Using libtool can explicitly specify dependency of libraries on other
   libraies. The libraries built under this package see sigio and nemsio
   libraries depending on bacio library. The dependency is specified in *.la
   files after libtool builds the libraries. Below is an example of the content
   of 'libnemsio.la': (the file really does not contain the dash lines)

----------------------------------------

# libnemsio.la - a libtool library file
# Generated by ltmain.sh (GNU libtool) 2.2.6b
#
# Please DO NOT delete this file!
# It is necessary for linking the library.

# The name that we can dlopen(3).
dlname=''

# Names of this library.
library_names=''

# The name of the static archive.
old_library='libnemsio.a'

# Linker flags that can not go in dependency_libs.
inherited_linker_flags=''

# Libraries that this one depends upon.
dependency_libs=' /glade/p/ral/nsap/sheu/trunk/lib/libbacio.la'

# Names of additional weak libraries provided by this library
weak_library_names=''

# Version information for libnemsio.
current=0
age=0
revision=0

# Is this an already installed library?
installed=yes

# Should we warn about portability when linking against -modules?
shouldnotlink=no

# Files to dlopen/dlpreopen
dlopen=''
dlpreopen=''

# Directory that this library needs to be installed in:
libdir='/glade/p/ral/nsap/sheu/trunk/lib'

----------------------------------------

   Note the 'dependency_libs' line!

   In contrast, 'libbacio.la' below has an empty string as value for the
   'dependency_libs' line:

----------------------------------------

# libbacio.la - a libtool library file
# Generated by ltmain.sh (GNU libtool) 2.2.6b
#
# Please DO NOT delete this file!
# It is necessary for linking the library.

# The name that we can dlopen(3).
dlname=''

# Names of this library.
library_names=''

# The name of the static archive.
old_library='libbacio.a'

# Linker flags that can not go in dependency_libs.
inherited_linker_flags=''

# Libraries that this one depends upon.
dependency_libs=''

# Names of additional weak libraries provided by this library
weak_library_names=''

# Version information for libbacio.
current=0
age=0
revision=0

# Is this an already installed library?
installed=yes

# Should we warn about portability when linking against -modules?
shouldnotlink=no

# Files to dlopen/dlpreopen
dlopen=''
dlpreopen=''

# Directory that this library needs to be installed in:
libdir='/glade/p/ral/nsap/sheu/trunk/lib'

----------------------------------------

   If the pre-built libraries was not built by libtool, the user need to create
   libbacio.la, libnemsio.la, and libsigio_i4r4.la following the above example.

   *** For simplicity, it is strongly recommended that the users build required
   *** libraries from this package by not defining CORELIB variable 

8. Special notes for users on zeus and wcoss systems

   There is no need to define any environment variables, as all the required
   variables on these two systems are pre-defined in configure.ac. Therefore,
   there is no need to supply any command-line options to "configure". However,
   please see note 7. above about pre-defined libraries.

****** Section B: for developers ******

1. Focus on the following files:

   a. 'configure.ac' in the root directory

   b. All the 'makefile.am' files in the root directory and all subdirectories

   If 'configure.ac' or any 'makefile.am' is updated, run

   % autoreconf

   before running "configure" again
