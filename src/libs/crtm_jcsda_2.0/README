JCSDA CRTM beta v2.0 Build Instructions
=======================================

$Id: README 6559 2010-02-02 18:04:19Z paul.vandelst@noaa.gov $


0) Several targets are available for specific compilers. The target names are:
     ibm  
     gfortran
     sgi      (untested)  
     sun      (untested)
     hp       (untested)
     intel
     lahey    (untested)
     pgi      (untested) - earlier version of compiler fail (ICE)
     g95
     absoft   (untested)
   Each target has a corresponding debug target, <name>_debug, that uses the typical
   set of compiler switches for debugging code,
     ibm_debug  
     gfortran_debug
     sgi_debug      (untested)  
     sun_debug      (untested)
     hp_debug       (untested)
     intel_debug
     lahey_debug    (untested)
     pgi_debug      (untested) - earlier version of compiler fail (ICE)
     g95_debug
     absoft_debug   (untested)
   
   The actual compiler and switch definitions are listed in the "make.macros" files.
   Also note that not all of the above compilers have been tested for the current 
   release.
   
   Note that the CRTM v2.0 release requires the Fortran compiler to be at least
   compatible with the ISO TR-15581 Allocatable Enhancements update to Fortran95.
   Most current Fortran95 compilers do support TR-15581.
   
   The build is OS-sensitive in that the compiler is selected based on the platform
   you are one. For example, if you build on an IBM/AIX system, the xlf95 compiler
   is invoked. Doing the same on a linux or MacOSX system invokes the default linux
   compiler; currently this is the Gnu gfortran f95 compiler.
   
   So, if you want to modify how the CRTM builds (different compiler, different
   switches) editing the "make.macros" file is, for now, your best best.
   Eventually we'll put together something smarter.
   
   For the linux folks out there, the bottom of the "make.macros" file contains
   the following
     LINUX_FLAGS = $(LINUX_FLAGS_GFORTRAN)
     #LINUX_FLAGS = $(LINUX_FLAGS_LAHEY)
     #LINUX_FLAGS = $(LINUX_FLAGS_PGI)
     #LINUX_FLAGS = $(LINUX_FLAGS_INTEL)
     #LINUX_FLAGS = $(LINUX_FLAGS_G95)
   If you want to change the default linux compiler simply comment out the gfrotran
   definition line and uncomment the compiler definition of your choice.


1) Once all the above stuff has been sorted out, to build the CRTM library type

     make [target]
   
   where the optional target is one listed in (0) above. Note that for some modules 
   you will get a number of "unused dummy argument" warnings. This is normal (at least,
   until we clean up the code and remove unused argument and variables).


2) To install the CRTM library in ./lib and ./include directories, type

     make install
     

3) That's really it. Any questions, suggestions, additions, bug reports, etc,
   let us know know at
     ncep.list.emc.jcsda_crtm@noaa.gov

    
